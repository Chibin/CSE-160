<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="54:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b1bf89fb728"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b1bf8aacb08"/></to>
    </wire>
    <wire loc="53:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b1bf89f0be8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b1bf8aadc00"/></to>
    </wire>
    <wire loc="55:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b1bf8ab5020"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b1bf89fadd8"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="serverp4C" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="ServerTimer" ref="0x2b1bf8c1ec38" loc="19:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ServerTimer" scoped="" ref="0x2b1bf8c1ec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b1bf8a7b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b1bf8a7b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b1bf8c1ce78"/>
        <function-ref name="fired" scoped="" ref="0x2b1bf8c155a8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b1bf8c1c2d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b1bf8c15e48"/>
        <function-ref name="getdt" scoped="" ref="0x2b1bf8c1b748"/>
        <function-ref name="gett0" scoped="" ref="0x2b1bf8c1b2f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b1bf8c159f8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b1bf8c167e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b1bf8c1c8a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b1bf8c16c88"/>
        <function-ref name="stop" scoped="" ref="0x2b1bf8c15158"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="serverWorker" ref="0x2b1bf8c46e60" loc="27:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="serverWorker" scoped="" ref="0x2b1bf8c46e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="serverWorker"/>
        <arguments>
          <type-tag size="I:4554" alignment="I:1"><struct-ref name="serverWorkerAL" ref="0x2b1bf8ba0148"/>
            <typename><typedef-ref name="serverWorkerAL" ref="0x2b1bf8bac0c8"/></typename>
          </type-tag>
          <type-tag size="I:2030" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b1bf8b95b30"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b1bf8b90cc8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b1bf8c37bb0"/>
        <function-ref name="sendMsg" scoped="" ref="0x2b1bf8c45690"/>
        <function-ref name="execute" scoped="" ref="0x2b1bf8c451f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x2b1bf8c31408" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2b1bf8c31408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2b1bf8c31758"/>
        <function-ref name="rand32" scoped="" ref="0x2b1bf8c318e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TCPManager" ref="0x2b1bf8c3dde0" loc="23:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TCPManager" scoped="" ref="0x2b1bf8c3dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TCPManager"/>
        <arguments>
          <type-tag size="I:2030" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b1bf8b95b30"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b1bf8b90cc8"/></typename>
          </type-tag>
          <type-tag size="I:28" alignment="I:1"><nx_struct-ref name="pack" ref="0x2b1bf8af6640"/>
            <typename><typedef-ref name="pack" ref="0x2b1bf8af5a40"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="socketInit" scoped="" ref="0x2b1bf8c30088"/>
        <function-ref name="init" scoped="" ref="0x2b1bf8c32bb0"/>
        <function-ref name="socket" scoped="" ref="0x2b1bf8c304d8"/>
        <function-ref name="freeSocket" scoped="" ref="0x2b1bf8c30de8"/>
        <function-ref name="getSocketfd" scoped="" ref="0x2b1bf8c3b748"/>
        <function-ref name="findFreeSocket" scoped="" ref="0x2b1bf8c30960"/>
        <function-ref name="handlePacket" scoped="" ref="0x2b1bf8c3b2b0"/>
        <function-ref name="getSocket" scoped="" ref="0x2b1bf8c3bbe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkerTimer" ref="0x2b1bf8c1bd50" loc="20:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WorkerTimer" scoped="" ref="0x2b1bf8c1bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b1bf8a7b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b1bf8a7b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b1bf8c28088"/>
        <function-ref name="fired" scoped="" ref="0x2b1bf8c2b6c8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b1bf8c29470"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b1bf8c29020"/>
        <function-ref name="getdt" scoped="" ref="0x2b1bf8c28928"/>
        <function-ref name="gett0" scoped="" ref="0x2b1bf8c284d8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b1bf8c2bb18"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b1bf8c2c8f0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b1bf8c29a40"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b1bf8c2cd90"/>
        <function-ref name="stop" scoped="" ref="0x2b1bf8c2b278"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TCPSocket" ref="0x2b1bf8c0e450" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TCPSocket" scoped="" ref="0x2b1bf8c0e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TCPSocket"/>
        <arguments>
          <type-tag size="I:2030" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b1bf8b95b30"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b1bf8b90cc8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="listen" scoped="" ref="0x2b1bf8bfcca0"/>
        <function-ref name="receive" scoped="" ref="0x2b1bf8c0ad88"/>
        <function-ref name="isConnectPending" scoped="" ref="0x2b1bf8c1a440"/>
        <function-ref name="release" scoped="" ref="0x2b1bf8c0c660"/>
        <function-ref name="isClosing" scoped="" ref="0x2b1bf8c199b8"/>
        <function-ref name="read" scoped="" ref="0x2b1bf8c0cb70"/>
        <function-ref name="init" scoped="" ref="0x2b1bf8bfc020"/>
        <function-ref name="bind" scoped="" ref="0x2b1bf8bfc530"/>
        <function-ref name="isClosed" scoped="" ref="0x2b1bf8c194a8"/>
        <function-ref name="isListening" scoped="" ref="0x2b1bf8c1ae60"/>
        <function-ref name="connect" scoped="" ref="0x2b1bf8c0d9a0"/>
        <function-ref name="copy" scoped="" ref="0x2b1bf8c17020"/>
        <function-ref name="accept" scoped="" ref="0x2b1bf8c0d328"/>
        <function-ref name="write" scoped="" ref="0x2b1bf8c0a4b0"/>
        <function-ref name="close" scoped="" ref="0x2b1bf8c0c150"/>
        <function-ref name="isConnected" scoped="" ref="0x2b1bf8c1a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="server" ref="0x2b1bf8c36450" loc="26:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="server" scoped="" ref="0x2b1bf8c36450"/></type-interface>
      <instance>
        <interfacedef-ref qname="server"/>
        <arguments>
          <type-tag size="I:2030" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b1bf8b95b30"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b1bf8b90cc8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b1bf8c38020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendMsgTimer" ref="0x2b1bf8c27020" loc="21:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Modules/serverp4C.nc">
      <component-ref qname="serverp4C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendMsgTimer" scoped="" ref="0x2b1bf8c27020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b1bf8a7b608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b1bf8a7b960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b1bf8c352b8"/>
        <function-ref name="fired" scoped="" ref="0x2b1bf8c26978"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b1bf8c246c8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b1bf8c24278"/>
        <function-ref name="getdt" scoped="" ref="0x2b1bf8c35b58"/>
        <function-ref name="gett0" scoped="" ref="0x2b1bf8c35708"/>
        <function-ref name="isRunning" scoped="" ref="0x2b1bf8c26dc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b1bf8c27b68"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b1bf8c24c98"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b1bf8c26088"/>
        <function-ref name="stop" scoped="" ref="0x2b1bf8c26528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b1bf89fb728" loc="48:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b1bf89fb728"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b1bf89fba78"/>
        <function-ref name="runTask" scoped="" ref="0x2b1bf89fbc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b1bf89f0be8" loc="47:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b1bf89f0be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b1bf89f2020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b1bf89f21a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b1bf89f2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b1bf8aacb08" loc="56:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b1bf8aacb08"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b1bf8aace58"/>
        <function-ref name="runTask" scoped="" ref="0x2b1bf8ab6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b1bf8ab5020" loc="57:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b1bf8ab5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b1bf8ab5370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b1bf8aadc00" loc="55:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b1bf8aadc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b1bf8aac020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b1bf8aac1a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b1bf8aac330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b1bf8acd7f0" loc="54:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b1bf8acd7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b1bf8acdb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b1bf89fadd8" loc="50:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b1bf89fadd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b1bf8ad1170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b1bf8ace240" loc="51:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b1bf8ace240"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b1bf8ace590"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Timer" loc="53:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
      <documentation loc="36:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b1bf8c17d48" loc="53:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b1bf8c17d48"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b1bf8c1f760" loc="136:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="132:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b1bf8c23178" loc="83:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="80:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2b1bf8c22da8" loc="114:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="100:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b1bf8c22810" loc="114:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b1bf8c22b28" loc="114:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2b1bf8c220d8" loc="98:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="94:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2b1bf8c1e6b0" loc="151:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="146:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2b1bf8c1fe80" loc="144:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="138:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b1bf8c238f0" loc="92:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="86:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2b1bf8c14858" loc="64:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="56:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b1bf8c145e8" loc="64:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2b1bf8c21d28" loc="129:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="116:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b1bf8c21790" loc="129:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b1bf8c21aa8" loc="129:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2b1bf8c132d0" loc="73:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="66:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b1bf8c13060" loc="73:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b1bf8c13a78" loc="78:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="75:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="serverWorker" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b1bf8c38898" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
          <interfacedef-ref qname="serverWorker"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
        </typedef>
        <typedef name="val2_t" ref="0x2b1bf8c38aa8" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
          <interfacedef-ref qname="serverWorker"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val2_t" scoped="" ref="0x2b1bf8c38aa8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x2b1bf8c487a0" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
        <interfacedef-ref qname="serverWorker"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val2_t" scoped="" ref="0x2b1bf8c38aa8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c48240" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
            </type-pointer>
          </variable>
          <variable ref="0x2b1bf8c48520" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val2_t" scoped="" ref="0x2b1bf8c38aa8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendMsg" ref="0x2b1bf8c46898" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
        <interfacedef-ref qname="serverWorker"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c46628" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="execute" ref="0x2b1bf8c46030" loc="3:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
        <interfacedef-ref qname="serverWorker"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c48d98" loc="3:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/serverWorker.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c38898"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x2b1bf8c310d8" loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <documentation loc="48:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x2b1bf8c348f8" loc="46:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <documentation loc="42:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b1bf81ca608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TCPManager" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b1bf8c2f0a0" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
          <interfacedef-ref qname="TCPManager"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
        </typedef>
        <typedef name="val2_t" ref="0x2b1bf8c2f2b0" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
          <interfacedef-ref qname="TCPManager"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val2_t" scoped="" ref="0x2b1bf8c2f2b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="socketInit" ref="0x2b1bf8c2e178" loc="3:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2b1bf8c2fa80" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="socket" ref="0x2b1bf8c2e840" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="freeSocket" ref="0x2b1bf8c2d8a8" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c2d638" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSocketfd" ref="0x2b1bf8c3eb88" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <documentation loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
          <short>&#10; Finds the socket with the same destination port number&#10;</short>
        </documentation>
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c3e8e0" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="findFreeSocket" ref="0x2b1bf8c2d020" loc="5:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="handlePacket" ref="0x2b1bf8c3e290" loc="7:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c3e020" loc="7:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSocket" ref="0x2b1bf8c3d878" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c2f0a0"/></type-var>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="portNum" ref="0x2b1bf8c3d2a0" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x2b1bf8c3d5c0" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TCPSocket" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b1bf8bfd290" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
          <interfacedef-ref qname="TCPSocket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="listen" ref="0x2b1bf8bf9a20" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8bf9468" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="backlog" ref="0x2b1bf8bf97a0" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x2b1bf8c010b8" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:1">
            <typename><typedef-ref name="int16_t" ref="0x2b1bf81c9658"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c039f0" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="readSocketBuffer" ref="0x2b1bf8c03dc0" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isConnectPending" ref="0x2b1bf8c01aa0" loc="27:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c01830" loc="27:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="release" ref="0x2b1bf8c07a68" loc="14:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c077f8" loc="14:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isClosing" ref="0x2b1bf8c0f290" loc="31:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c0f020" loc="31:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x2b1bf8c05de8" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:1">
            <typename><typedef-ref name="int16_t" ref="0x2b1bf81c9658"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c05178" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="readBuffer" ref="0x2b1bf8c05508" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="pos" ref="0x2b1bf8c05828" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x2b1bf8c05b48" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2b1bf8bfdd18" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8bfdaa8" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="bind" ref="0x2b1bf8bfad48" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8bfa420" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="localPort" ref="0x2b1bf8bfa770" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </variable>
          <variable name="address" ref="0x2b1bf8bfaab8" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isClosed" ref="0x2b1bf8c118f0" loc="30:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c11680" loc="30:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isListening" ref="0x2b1bf8c00dc8" loc="29:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c00b58" loc="29:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="connect" ref="0x2b1bf8c08770" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8bf7e08" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="destAddr" ref="0x2b1bf8c08198" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </variable>
          <variable name="destPort" ref="0x2b1bf8c084e0" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="copy" ref="0x2b1bf8c0e020" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c0f920" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="output" ref="0x2b1bf8c0fc78" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="accept" ref="0x2b1bf8bf7718" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8bf7140" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="output" ref="0x2b1bf8bf7498" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2b1bf8c032c0" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:1">
            <typename><typedef-ref name="int16_t" ref="0x2b1bf81c9658"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c04518" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
          <variable name="writeBuffer" ref="0x2b1bf8c048b0" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="pos" ref="0x2b1bf8c04bd0" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x2b1bf8c03020" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b1bf81c9b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="close" ref="0x2b1bf8c07108" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b1bf81c9160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c08e50" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isConnected" ref="0x2b1bf8c00458" loc="28:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b1bf8c001e8" loc="28:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8bfd290"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="server" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b1bf8c39610" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
          <interfacedef-ref qname="server"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c39610"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x2b1bf8c36020" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
        <interfacedef-ref qname="server"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c39610"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b1bf8c39d78" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b1bf8c39610"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b1bf89fc608" loc="67:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b1bf89f51a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b1bf89fcdf8" loc="75:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b1bf89ee978" loc="57:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b1bf89f0878" loc="72:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b1bf89f00d8" loc="65:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b1bf89ec9b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b1bf8ab6cb0" loc="76:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/home/maru/local/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b1bf8acd360" loc="62:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b1bf8a4f940"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b1bf8ad1e68" loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
