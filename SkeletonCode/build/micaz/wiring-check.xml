<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="103:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <from><interface-ref name="sendBufferTask" scoped="" ref="0x2b7eb27bc080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b7eb2451728"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b7eb2451728"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b7eb2502b08"/></to>
    </wire>
    <wire loc="53:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b7eb2446be8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b7eb2503c00"/></to>
    </wire>
    <wire loc="55:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b7eb250b020"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b7eb2450dd8"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="Node" loc="28:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="AMControl" ref="0x2b7eb2761e80" loc="36:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x2b7eb2761e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2b7eb27591f8"/>
        <function-ref name="stopDone" scoped="" ref="0x2b7eb2759380"/>
        <function-ref name="start" scoped="" ref="0x2b7eb2759508"/>
        <function-ref name="stop" scoped="" ref="0x2b7eb2759690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2b7eb26e16e8" loc="29:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b7eb26e16e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b7eb26e1a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2b7eb273e900" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b7eb273e900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b7eb273ec50"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b7eb273edd8"/>
        <function-ref name="getPayload" scoped="" ref="0x2b7eb26e6020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b7eb26e61a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b7eb26e6330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x2b7eb273f020" loc="35:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b7eb273f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b7eb273f370"/>
        <function-ref name="getPayload" scoped="" ref="0x2b7eb273f4f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b7eb273f680"/>
        <function-ref name="cancel" scoped="" ref="0x2b7eb273f808"/>
        <function-ref name="sendDone" scoped="" ref="0x2b7eb273f990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="neighborDiscoveryTimer" ref="0x2b7eb2771d28" loc="38:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="neighborDiscoveryTimer" scoped="" ref="0x2b7eb2771d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b7eb24d1608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b7eb24d1960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b7eb276f088"/>
        <function-ref name="fired" scoped="" ref="0x2b7eb2760688"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b7eb2770470"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b7eb2770020"/>
        <function-ref name="getdt" scoped="" ref="0x2b7eb276f928"/>
        <function-ref name="gett0" scoped="" ref="0x2b7eb276f4d8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b7eb2760ad8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b7eb27658b8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b7eb2770a40"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b7eb2765d58"/>
        <function-ref name="stop" scoped="" ref="0x2b7eb2760238"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x2b7eb26e5b88" loc="32:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2b7eb26e5b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2b7eb26e7020"/>
        <function-ref name="rand32" scoped="" ref="0x2b7eb26e71a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="neighborUpdateTimer" ref="0x2b7eb276e020" loc="39:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="neighborUpdateTimer" scoped="" ref="0x2b7eb276e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b7eb24d1608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b7eb24d1960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b7eb276a2b8"/>
        <function-ref name="fired" scoped="" ref="0x2b7eb276d978"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b7eb276b6c8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b7eb276b278"/>
        <function-ref name="getdt" scoped="" ref="0x2b7eb276ab58"/>
        <function-ref name="gett0" scoped="" ref="0x2b7eb276a708"/>
        <function-ref name="isRunning" scoped="" ref="0x2b7eb276ddc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b7eb276eb68"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b7eb276bc98"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b7eb276d088"/>
        <function-ref name="stop" scoped="" ref="0x2b7eb276d528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendBufferTask" ref="0x2b7eb27bc080" loc="103:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendBufferTask" scoped="" ref="0x2b7eb27bc080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b7eb27bc3d0"/>
        <function-ref name="runTask" scoped="" ref="0x2b7eb27bc558"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x2b7eb27714b0" loc="37:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b7eb27714b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x2b7eb2771800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ALServer" ref="0x2b7eb2777758" loc="42:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ALServer" scoped="" ref="0x2b7eb2777758"/></type-interface>
      <instance>
        <interfacedef-ref qname="server"/>
        <arguments>
          <type-tag size="I:2025" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b7eb25de6e8"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b7eb25e9088"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b7eb2779370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TCPManager" ref="0x2b7eb27a9630" loc="45:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TCPManager" scoped="" ref="0x2b7eb27a9630"/></type-interface>
      <instance>
        <interfacedef-ref qname="TCPManager"/>
        <arguments>
          <type-tag size="I:2025" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b7eb25de6e8"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b7eb25e9088"/></typename>
          </type-tag>
          <type-tag size="I:28" alignment="I:1"><nx_struct-ref name="pack" ref="0x2b7eb254c640"/>
            <typename><typedef-ref name="pack" ref="0x2b7eb254ba40"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="socketInit" scoped="" ref="0x2b7eb279b7c0"/>
        <function-ref name="init" scoped="" ref="0x2b7eb279b370"/>
        <function-ref name="socket" scoped="" ref="0x2b7eb279bc10"/>
        <function-ref name="freeSocket" scoped="" ref="0x2b7eb2798548"/>
        <function-ref name="getSocketfd" scoped="" ref="0x2b7eb2798e78"/>
        <function-ref name="findFreeSocket" scoped="" ref="0x2b7eb27980c0"/>
        <function-ref name="handlePacket" scoped="" ref="0x2b7eb27989e0"/>
        <function-ref name="getSocket" scoped="" ref="0x2b7eb27a7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ALClient" ref="0x2b7eb27994e8" loc="44:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ALClient" scoped="" ref="0x2b7eb27994e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="client"/>
        <arguments>
          <type-tag size="I:2025" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b7eb25de6e8"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b7eb25e9088"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b7eb279c088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NodeA" ref="0x2b7eb27b7938" loc="49:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NodeA" scoped="" ref="0x2b7eb27b7938"/></type-interface>
      <instance>
        <interfacedef-ref qname="NodeA"/>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b7eb27b7c88"/>
        <function-ref name="sendDataPacket" scoped="" ref="0x2b7eb27b7e10"/>
        <function-ref name="sendTransport" scoped="" ref="0x2b7eb27a6020"/>
        <function-ref name="sendPacket" scoped="" ref="0x2b7eb27a61a8"/>
        <function-ref name="getSocket" scoped="" ref="0x2b7eb27a6330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="lspTimer" ref="0x2b7eb27691e8" loc="40:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="lspTimer" scoped="" ref="0x2b7eb27691e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b7eb24d1608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b7eb24d1960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b7eb277b5f0"/>
        <function-ref name="fired" scoped="" ref="0x2b7eb2768af0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b7eb277c8c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b7eb277c470"/>
        <function-ref name="getdt" scoped="" ref="0x2b7eb277a020"/>
        <function-ref name="gett0" scoped="" ref="0x2b7eb277ba40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b7eb277c020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b7eb2769d30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b7eb277b020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b7eb2768200"/>
        <function-ref name="stop" scoped="" ref="0x2b7eb27686a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="pingTimeoutTimer" ref="0x2b7eb26ec5e0" loc="30:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="pingTimeoutTimer" scoped="" ref="0x2b7eb26ec5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b7eb24d1608"/>
            <typename><typedef-ref name="TMilli" ref="0x2b7eb24d1960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b7eb26ea8f0"/>
        <function-ref name="fired" scoped="" ref="0x2b7eb26eb020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b7eb26ebd10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b7eb26eb8c0"/>
        <function-ref name="getdt" scoped="" ref="0x2b7eb26e91c0"/>
        <function-ref name="gett0" scoped="" ref="0x2b7eb26ead40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b7eb26eb470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b7eb26e2158"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b7eb26ea320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b7eb26e25f8"/>
        <function-ref name="stop" scoped="" ref="0x2b7eb26e2a98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2b7eb275a0f0" loc="34:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b7eb275a0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b7eb275a440"/>
        <function-ref name="source" scoped="" ref="0x2b7eb275a5c8"/>
        <function-ref name="address" scoped="" ref="0x2b7eb275a750"/>
        <function-ref name="destination" scoped="" ref="0x2b7eb275a8d8"/>
        <function-ref name="setSource" scoped="" ref="0x2b7eb275aa60"/>
        <function-ref name="setDestination" scoped="" ref="0x2b7eb275abe8"/>
        <function-ref name="type" scoped="" ref="0x2b7eb275ad70"/>
        <function-ref name="setType" scoped="" ref="0x2b7eb26e4020"/>
        <function-ref name="isForMe" scoped="" ref="0x2b7eb26e41a8"/>
        <function-ref name="setGroup" scoped="" ref="0x2b7eb26e4330"/>
        <function-ref name="localGroup" scoped="" ref="0x2b7eb26e44b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ALSocket" ref="0x2b7eb2790d58" loc="43:/home/maru/workspace1/CSE-160/SkeletonCode/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ALSocket" scoped="" ref="0x2b7eb2790d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TCPSocket"/>
        <arguments>
          <type-tag size="I:2025" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b7eb25de6e8"/>
            <typename><typedef-ref name="TCPSocketAL" ref="0x2b7eb25e9088"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="listen" scoped="" ref="0x2b7eb278f790"/>
        <function-ref name="receive" scoped="" ref="0x2b7eb278b8f8"/>
        <function-ref name="isConnectPending" scoped="" ref="0x2b7eb2789020"/>
        <function-ref name="release" scoped="" ref="0x2b7eb278c130"/>
        <function-ref name="isClosing" scoped="" ref="0x2b7eb279e598"/>
        <function-ref name="read" scoped="" ref="0x2b7eb278c640"/>
        <function-ref name="init" scoped="" ref="0x2b7eb2778a18"/>
        <function-ref name="bind" scoped="" ref="0x2b7eb278f020"/>
        <function-ref name="isClosed" scoped="" ref="0x2b7eb279e088"/>
        <function-ref name="isListening" scoped="" ref="0x2b7eb2789a40"/>
        <function-ref name="connect" scoped="" ref="0x2b7eb278e480"/>
        <function-ref name="copy" scoped="" ref="0x2b7eb279eaa8"/>
        <function-ref name="accept" scoped="" ref="0x2b7eb278fdd0"/>
        <function-ref name="write" scoped="" ref="0x2b7eb278b020"/>
        <function-ref name="close" scoped="" ref="0x2b7eb278ebf0"/>
        <function-ref name="isConnected" scoped="" ref="0x2b7eb2789530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b7eb2451728" loc="48:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b7eb2451728"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b7eb2451a78"/>
        <function-ref name="runTask" scoped="" ref="0x2b7eb2451c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b7eb2446be8" loc="47:/home/maru/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b7eb2446be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b7eb2448020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b7eb24481a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b7eb2448330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b7eb2502b08" loc="56:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b7eb2502b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b7eb2502e58"/>
        <function-ref name="runTask" scoped="" ref="0x2b7eb250c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b7eb250b020" loc="57:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b7eb250b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b7eb250b370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b7eb2503c00" loc="55:/home/maru/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b7eb2503c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b7eb2502020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b7eb25021a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b7eb2502330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b7eb25237f0" loc="54:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b7eb25237f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b7eb2523b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b7eb2450dd8" loc="50:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b7eb2450dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b7eb2527170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b7eb2524240" loc="51:/home/maru/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b7eb2524240"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b7eb2524590"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="SplitControl" loc="87:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x2b7eb27624e8" loc="113:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2b7eb2762278" loc="113:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x2b7eb2761a40" loc="138:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2b7eb27617d0" loc="138:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b7eb27648b0" loc="104:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b7eb2762cd0" loc="130:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/home/maru/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/home/maru/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
      <documentation loc="42:/home/maru/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2b7eb26e1328" loc="60:/home/maru/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
        <documentation loc="51:/home/maru/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
      <function command="" provided="0" name="clear" ref="0x2b7eb27466e0" loc="65:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="58:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb2746470" loc="65:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x2b7eb27456f8" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="67:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb2745488" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2b7eb2740840" loc="126:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="109:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb2740278" loc="126:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b7eb2740588" loc="126:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2b7eb2741978" loc="106:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="96:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x2b7eb2743aa8" loc="94:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="80:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb2743518" loc="94:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b7eb2743828" loc="94:/home/maru/local/tinyos-2.1.1/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2b7eb2757a08" loc="80:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="60:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2b7eb2757108" loc="80:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x2b7eb2757468" loc="80:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b7eb2757778" loc="80:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2b7eb2766020" loc="135:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="126:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb27528e0" loc="135:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b7eb2752bf0" loc="135:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2b7eb27520d8" loc="123:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="113:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b7eb2754ce0" loc="96:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="82:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb2754a70" loc="96:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b7eb27532a0" loc="110:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="98:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb2755cc8" loc="110:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x2b7eb2753020" loc="110:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
      <documentation loc="36:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b7eb26e0448" loc="53:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b7eb26e0448"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b7eb26d9020" loc="136:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="132:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b7eb26de8f8" loc="83:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="80:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2b7eb26db5b8" loc="114:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="100:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b7eb26db020" loc="114:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b7eb26db338" loc="114:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2b7eb26dd870" loc="98:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="94:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2b7eb26ec020" loc="151:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="146:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2b7eb26d9740" loc="144:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="138:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b7eb26dd0d8" loc="92:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="86:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2b7eb26df020" loc="64:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="56:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b7eb26e0ca8" loc="64:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2b7eb26da5b8" loc="129:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="116:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b7eb26da020" loc="129:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b7eb26da338" loc="129:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2b7eb26dfa60" loc="73:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="66:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b7eb26df7f0" loc="73:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b7eb26de258" loc="78:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="75:/home/maru/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x2b7eb26e57b8" loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <documentation loc="48:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x2b7eb26e5020" loc="46:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <documentation loc="42:/home/maru/local/tinyos-2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b7eb1c20608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b7eb2452608" loc="67:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b7eb244b1a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b7eb2452df8" loc="75:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/home/maru/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/home/maru/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
      <documentation loc="34:/home/maru/local/tinyos-2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x2b7eb275fc48" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
        <documentation loc="58:/home/maru/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
              <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b7eb275f348" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x2b7eb275f670" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b7eb275f980" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="server" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b7eb277a808" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
          <interfacedef-ref qname="server"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb277a808"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x2b7eb2777290" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
        <interfacedef-ref qname="server"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb277a808"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b7eb2777020" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/server.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb277a808"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TCPManager" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b7eb279c910" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
          <interfacedef-ref qname="TCPManager"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
        </typedef>
        <typedef name="val2_t" ref="0x2b7eb279cb20" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
          <interfacedef-ref qname="TCPManager"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val2_t" scoped="" ref="0x2b7eb279cb20"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="socketInit" ref="0x2b7eb27979a8" loc="3:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2b7eb2797328" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="socket" ref="0x2b7eb27960d8" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="freeSocket" ref="0x2b7eb27940a8" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b7eb2796e08" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSocketfd" ref="0x2b7eb27ab2c8" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <documentation loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
          <short>&#10; Finds the socket with the same destination port number&#10;</short>
        </documentation>
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b7eb27ab020" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="findFreeSocket" ref="0x2b7eb27967f0" loc="5:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="handlePacket" ref="0x2b7eb2794910" loc="7:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b7eb27946a0" loc="7:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSocket" ref="0x2b7eb27a9020" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
        <interfacedef-ref qname="TCPManager"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279c910"/></type-var>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="portNum" ref="0x2b7eb27ab9b0" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x2b7eb27abcd0" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPManager.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="client" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/client.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b7eb279d4b0" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/client.nc">
          <interfacedef-ref qname="client"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279d4b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x2b7eb2799020" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/client.nc">
        <interfacedef-ref qname="client"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279d4b0"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x2b7eb279dc18" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/client.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb279d4b0"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NodeA" loc="3:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
      <documentation loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/TCPSocketAL.h">
        <short>&#10; ANDES Lab - University of California, Merced&#10; This class provides the basic functions of a network node.</short>
        <long>&#10; ANDES Lab - University of California, Merced&#10; This class provides the basic functions of a network node.&#10;&#10; @author UCM ANDES Lab&#10; @date   October 1 2012&#10; &#10;</long>
      </documentation>
      <function command="" provided="0" name="test" ref="0x2b7eb27a4328" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
        <interfacedef-ref qname="NodeA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sendDataPacket" ref="0x2b7eb27a0960" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
        <interfacedef-ref qname="NodeA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="srcPort" ref="0x2b7eb27a1570" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="destAddr" ref="0x2b7eb27a18c8" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
          <variable name="destPort" ref="0x2b7eb27a1c10" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="flagType" ref="0x2b7eb27a0020" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="payload" ref="0x2b7eb27a0390" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b7eb27a06a0" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendTransport" ref="0x2b7eb27b76a0" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
        <interfacedef-ref qname="NodeA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:20" alignment="I:1"><nx_struct-ref name="transport" ref="0x2b7eb2553378"/>
                <typename><typedef-ref name="transport" ref="0x2b7eb2552a88"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tcpHeader" ref="0x2b7eb27b70c8" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:20" alignment="I:1"><nx_struct-ref name="transport" ref="0x2b7eb2553378"/>
                <typename><typedef-ref name="transport" ref="0x2b7eb2552a88"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="destAddr" ref="0x2b7eb27b7420" loc="11:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendPacket" ref="0x2b7eb27a36b0" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
        <documentation loc="5:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
          <short>&#10; sendPacket(uint8_t srcPort, uint16_t destAddr, uint8_t destPort, uint8_t flagType)&#10;</short>
        </documentation>
        <interfacedef-ref qname="NodeA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="srcPort" ref="0x2b7eb27a49f8" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="destAddr" ref="0x2b7eb27a4d50" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
          <variable name="destPort" ref="0x2b7eb27a30c8" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="flagType" ref="0x2b7eb27a3410" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSocket" ref="0x2b7eb27a3e60" loc="9:/home/maru/workspace1/CSE-160/SkeletonCode/src/NodeA.nc">
        <interfacedef-ref qname="NodeA"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:2025" alignment="I:1"><struct-ref name="TCPSocketAL" ref="0x2b7eb25de6e8"/>
              <typename><typedef-ref name="TCPSocketAL" ref="0x2b7eb25e9088"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x2b7eb2747b08" loc="177:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2b7eb272bdb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb2747898" loc="177:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x2b7eb2750bd8" loc="88:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb2750968" loc="88:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x2b7eb273d178" loc="68:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x2b7eb273dbd0" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb273d960" loc="78:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x2b7eb274e450" loc="121:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb2751e60" loc="121:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x2b7eb274e1d0" loc="121:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x2b7eb2751020" loc="103:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb274f958" loc="103:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x2b7eb274fc90" loc="103:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b7eb272a1b8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x2b7eb274b768" loc="147:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2b7eb272ba08"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb274b4f8" loc="147:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x2b7eb27499d8" loc="162:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2b7eb272ba08"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb2749458" loc="162:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x2b7eb2749758" loc="162:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2b7eb272ba08"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x2b7eb274c600" loc="136:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb274c390" loc="136:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x2b7eb2748020" loc="187:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2b7eb272bdb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b7eb275c920" loc="187:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b7eb2733780"/>
                <typename><typedef-ref name="message_t" ref="0x2b7eb2731cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x2b7eb275cc50" loc="187:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2b7eb272bdb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x2b7eb2748d88" loc="195:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/home/maru/local/tinyos-2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2b7eb272bdb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TCPSocket" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
      <parameters>
        <typedef name="val_t" ref="0x2b7eb2779be8" loc="1:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
          <interfacedef-ref qname="TCPSocket"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="listen" ref="0x2b7eb2787408" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2773e28" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="backlog" ref="0x2b7eb2787188" loc="6:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x2b7eb277fa88" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:1">
            <typename><typedef-ref name="int16_t" ref="0x2b7eb1c1f658"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb277f438" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="readSocketBuffer" ref="0x2b7eb277f808" loc="22:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isConnectPending" ref="0x2b7eb277e4d8" loc="27:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb277e268" loc="27:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="release" ref="0x2b7eb27835a8" loc="14:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2783338" loc="14:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isClosing" ref="0x2b7eb2791bf0" loc="31:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2791980" loc="31:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x2b7eb2782940" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:1">
            <typename><typedef-ref name="int16_t" ref="0x2b7eb1c1f658"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2783c80" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="readBuffer" ref="0x2b7eb2782060" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="pos" ref="0x2b7eb2782380" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x2b7eb27826a0" loc="16:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2b7eb27746c8" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2774458" loc="2:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="bind" ref="0x2b7eb2773740" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2774da0" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="localPort" ref="0x2b7eb2773168" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
          <variable name="address" ref="0x2b7eb27734b0" loc="4:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isClosed" ref="0x2b7eb2791290" loc="30:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2791020" loc="30:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isListening" ref="0x2b7eb2793808" loc="29:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2793598" loc="29:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="connect" ref="0x2b7eb27852b0" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2786808" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="destAddr" ref="0x2b7eb2786b60" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
          <variable name="destPort" ref="0x2b7eb2785020" loc="10:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="copy" ref="0x2b7eb2790890" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb27902b8" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="output" ref="0x2b7eb2790610" loc="33:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="accept" ref="0x2b7eb2786118" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2787af0" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="output" ref="0x2b7eb2787e48" loc="8:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2b7eb2781cd8" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:1">
            <typename><typedef-ref name="int16_t" ref="0x2b7eb1c1f658"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2781060" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="writeBuffer" ref="0x2b7eb27813f8" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="pos" ref="0x2b7eb2781718" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x2b7eb2781a38" loc="18:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b7eb1c1fb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="close" ref="0x2b7eb2785c00" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b7eb1c1f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb2785990" loc="12:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isConnected" ref="0x2b7eb277ee48" loc="28:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
        <interfacedef-ref qname="TCPSocket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2b7eb277ebd8" loc="28:/home/maru/workspace1/CSE-160/SkeletonCode/src/lib/Interfaces/TCPSocket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b7eb2779be8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b7eb2444978" loc="57:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b7eb2446878" loc="72:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b7eb24460d8" loc="65:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/home/maru/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b7eb24429b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b7eb250ccb0" loc="76:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/home/maru/local/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.8 2010-06-29 22:07:54 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b7eb2523360" loc="62:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b7eb24a5940"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b7eb2527e68" loc="52:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/home/maru/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
